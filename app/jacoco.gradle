apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class',
                      '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                      '**/*Module.*', // Modules for Dagger.
                      '**/*Dagger*.*', // Dagger auto-generated code.
                      '**/*MembersInjector*.*', // Dagger auto-generated code.
                      '**/*_Provide*Factory*.*',
                      '**/*_Factory.*', //Dagger auto-generated code
                      '**/*$*$*.*', // Anonymous classes generated by kotlin
                      'android/**/*.*']

    def debugTree = fileTree(dir:
            "${project.buildDir}/intermediates/classes/debug",
            excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([debugTree])
    additionalSourceDirs.setFrom files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])
    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "jacoco/testMycmsMockDebugUnitTest.exec",
            "jacoco/testMycmsProdDebugUnitTest.exec",
            "outputs/code-coverage/connected/flavors/**/*coverage.ec"
    ])

    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}